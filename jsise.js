!function(){var wabisabi=function n(e){if(e.nodeType>0)return e;if("string"==typeof e)return document.createTextNode(e);if(void 0!=e.length){for(var r="span",t=[],i=void 0,g=void 0,S=e[0];g=S.match(new RegExp("^([.#])?([^.#]+)(.*)"));)"."==g[1]?t.push(g[2]):"#"==g[1]?i=g[2]:r=g[2],S=g[3];var w=document.createElement(r);i&&(w.id=i),t[0]&&(w.className=t.join(" "));for(var a in e[1])"style"==a?w.style.cssText=e[1][a]:"class"==a?w.className=e[1][a]:w[a]=e[1][a];var o=e.slice(1).slice(1);for(var s in o)w.appendChild(n(o[s]));return w}},getRandomInt=function(n,e){return Math.floor(Math.random()*(e-n+1))+n},stdlib=[[new String("defmacro"),new String("//"),[new String("JSCode"),"(function(){ return [new String('undefined')]; })"]],[new String("defmacro"),new String("debugger"),[new String("JSCode"),"(function(){ return [new String('debugger')]; })"]],[new String("defmacro"),new String("quote"),[new String("JSCode"),"(function quote(exp) {\n    var JSCode = new String('JSCode');\n    JSCode.equals = function (other) {\n      return other instanceof String && other.valueOf() == this.valueOf();\n    };\n    function toStr(str) {\n      var esc = [JSCode, '\"'];\n      for(var i=0;i<exp.length;i++) {\n        var c = exp.charAt(i);\n        if (c=='\"' || c == '\\\\') {\n          esc.push('\\\\' + c);\n        } else if (c == '\\n') {\n          esc.push('\\\\n');\n        } else {\n          esc.push(c);\n        }\n      }\n      esc.push('\"');\n      return esc;\n    }\n    if (typeof exp == 'string') {\n      return [toStr(exp)];\n    }\n    if (exp instanceof String) {\n      return [[JSCode, 'new String(', toStr(exp.valueOf()), ')']];\n    }\n    if (!(exp instanceof Array)) {\n      throw new Error('invalid ast');\n    }\n    return [[JSCode, '['].concat(\n        exp.map(quote).reduce(function(arr, v, i) {\n          if (i != 0) {\n            return arr.concat([',', v[0]]);\n          } else {\n            return arr.concat([v[0]]);\n          }\n        }, []), [']'])];\n  })"]],[new String("defmacro"),new String("syntax-macro"),[new String("JSCode"),"(function(var_args) {\n    var arg = Array.prototype.slice.call(arguments, 0);\n    return [[new String('JSCode'), '(function() { ',\n      'var template = ' ].concat([\n          [new String('JSise'),\n            [new String('quote'), arg]],\n      ';',\n      'var targ = arguments;',\n      'function expand(template) {',\n      '  if (template instanceof String) {',\n      '    var r = (/^[~](([~]+)?([0-9]+)(-)?)$/).exec(template.valueOf());',\n      '    if (r) {',\n      '      if (r[2]) {',\n      '        return [new String(r[1])];',\n      '      } else if (r[4]) {',\n      '        return Array.prototype.slice.call(targ, parseInt(r[3]));',\n      '      } else {',\n      '        return [targ[parseInt(r[3])]];',\n      '      }',\n      '    }',\n      '  }',\n      '  if (template instanceof Array) {',\n      '    return [template.reduce(function(o,t) {', \n      '      return o.concat(expand(t));',\n      '    }, [])];',\n      '  }',\n      '  return [template];',\n      '}',\n      'return expand(template)[0];',\n      '})'])];\n  })"]],[new String("defmacro"),new String("shallow-quote-list"),[new String("JSCode"),"(function(varg){\n    return [[new String('JSCode')].concat(varg.reduce(function(a,v,i) {\n      if (i!=0) {\n        return a.concat([',', [ new String('JSise'), v]]);\n      } else {\n        return a.concat([[new String('JSise'), v]]);\n      }\n    },[]))];\n  })"]],[new String("defmacro"),new String("statement-list"),[new String("JSCode"),"(function (statements){\n    return [statements.reduce(function(ar, i) {\n      return ar.concat([i, [new String('JSCode'), ';\\n']]);\n    }, [new String('JSise')])];\n  })"]],[new String("defmacro"),new String("fn"),[new String("syntax-macro"),[new String("JSCode"),"(function(",[new String("JSise"),[new String("shallow-quote-list"),new String("~0")]],") {","  return ",[new String("JSise"),new String("~1")],"})"]]],[new String("defmacro"),new String("fn-with-name"),[new String("syntax-macro"),[new String("JSCode"),"(function ",new String("~0")," (",[new String("JSise"),[new String("shallow-quote-list"),new String("~1")]],") {","  return ",[new String("JSise"),new String("~2")],"})"]]],[new String("defmacro"),new String("function"),[new String("syntax-macro"),[new String("JSCode"),"(function(",[new String("JSise"),[new String("shallow-quote-list"),new String("~0")]],") { ",[new String("statement-list"),[new String("~1-")]],"})"]]],[new String("defmacro"),new String("function-with-name"),[new String("syntax-macro"),[new String("JSCode"),"(function ",new String("~0")," (",[new String("JSise"),[new String("shallow-quote-list"),new String("~1")]],") { ",[new String("statement-list"),[new String("~2-")]],"})"]]],[new String("defmacro"),new String("return"),[new String("syntax-macro"),[new String("JSCode"),"return ",[new String("JSise"),new String("~0")]]]],[new String("defmacro"),new String("list"),[new String("syntax-macro"),[new String("JSCode"),"[",[new String("shallow-quote-list"),[new String("~0-")]],"]"]]],[new String("defmacro"),new String("shallow-quote"),[new String("fn"),[new String("body")],[new String("list"),[new String(".concat"),[new String("quote"),[new String("list")]],new String("body")]]]],[new String("defmacro"),new String("concat"),[new String("syntax-macro"),[new String("Array.prototype.concat.apply"),[new String("list")],[new String("shallow-quote"),[new String("~0-")]]]]],[new String("defmacro"),new String("cons"),[new String("syntax-macro"),[new String("concat"),[new String("list"),new String("~0")],new String("~1")]]],[new String("defmacro"),new String("if"),[new String("syntax-macro"),[new String("JSCode"),"(",[new String("JSise"),new String("~0")],"?",[new String("JSise"),new String("~1")],":",[new String("JSise"),new String("~2")],")"]]],[new String("defmacro"),new String("ifs"),[new String("syntax-macro"),[new String("JSCode"),"if (",[new String("JSise"),new String("~0")],") {",[new String("statement-list"),new String("~1")],"} else {",[new String("statement-list"),new String("~2")],"}"]]],[new String("defmacro"),new String("get"),[new String("syntax-macro"),[new String("JSCode"),"(",[new String("JSise"),new String("~0")],".",[new String("JSise"),new String("~1")],")"]]],[new String("defmacro"),new String("aget"),[new String("syntax-macro"),[new String("JSCode"),"(",[new String("JSise"),new String("~0")],"[",[new String("JSise"),new String("~1")],"])"]]],[new String("defmacro"),new String("aset!"),[new String("syntax-macro"),[new String("JSCode"),"(",[new String("JSise"),new String("~0")],"[",[new String("JSise"),new String("~1")],"] = ",[new String("JSise"),new String("~2")],")"]]],[new String("defmacro"),new String("var"),[new String("syntax-macro"),[new String("JSCode"),"var ",[new String("JSise"),new String("~0")]," = ",[new String("JSise"),new String("~1")]]]],[new String("defmacro"),new String("def-binary-operator"),[new String("syntax-macro"),[new String("defmacro"),new String("~0"),[new String("syntax-macro"),[new String("JSCode"),"(",[new String("JSise"),new String("~~0")]," ",new String("~1")," ",[new String("JSise"),new String("~~1")],")"]]]]],[new String("def-binary-operator"),new String("*"),new String("*")],[new String("def-binary-operator"),new String("/"),new String("/")],[new String("def-binary-operator"),new String("plus-operator"),new String("+")],[new String("def-binary-operator"),new String("-"),new String("-")],[new String("def-binary-operator"),new String("%"),new String("%")],[new String("def-binary-operator"),new String("="),new String("=")],[new String("def-binary-operator"),new String("=="),new String("==")],[new String("def-binary-operator"),new String("!="),new String("!=")],[new String("def-binary-operator"),new String("==="),new String("===")],[new String("def-binary-operator"),new String("&&"),new String("&&")],[new String("def-binary-operator"),new String("||"),new String("||")],[new String("def-binary-operator"),new String("<"),new String("<")],[new String("def-binary-operator"),new String(">"),new String(">")],[new String("def-binary-operator"),new String("<="),new String("<=")],[new String("def-binary-operator"),new String("=>"),new String("=>")],[new String("def-binary-operator"),new String("instanceof"),new String("instanceof")],[new String("def-binary-operator"),new String("^"),new String("^")],[new String("def-binary-operator"),new String("|"),new String("|")],[new String("def-binary-operator"),new String("&"),new String("&")],[new String("def-binary-operator"),new String("<<"),new String("<<")],[new String("def-binary-operator"),new String(">>"),new String(">>")],[new String("defmacro"),new String("not"),[new String("syntax-macro"),[new String("JSCode"),"(!",[new String("JSise"),new String("~0")],")"]]],[new String("defmacro"),new String("set!"),[new String("syntax-macro"),[new String("="),new String("~0-")]]],[new String("defmacro"),new String("symbol->string"),[new String("syntax-macro"),[new String(".valueOf"),new String("~0")]]],[new String("defmacro"),new String("symbol-name"),[new String("fn"),[new String("symbol")],[new String("list"),[new String("symbol->string"),new String("symbol")]]]],[new String("defmacro"),new String("symbol-name-list"),[new String("fn"),[new String("symbolList")],[new String("list"),[new String("cons"),[new String("quote"),new String("list")],[new String(".map"),new String("symbolList"),[new String("fn"),[new String("n")],[new String("symbol->string"),new String("n")]]]]]]],[new String("defmacro"),new String("let1"),[new String("syntax-macro"),[[new String("fn"),[new String("~0")],new String("~2")],new String("~1")]]],[new String("defmacro"),new String("zip"),[new String("syntax-macro"),[new String("let1"),new String("ar"),new String("~0"),[new String(".map"),[new String("aget"),new String("ar"),new String("0")],[new String("fn"),[new String("_"),new String("i")],[new String(".map"),new String("ar"),[new String("fn"),[new String("a")],[new String("aget"),new String("a"),new String("i")]]]]]]]],[new String("defmacro"),new String("odd?"),[new String("syntax-macro"),[new String("=="),[new String("%"),new String("~0"),new String("2")],new String("0")]]],[new String("defmacro"),new String("even?"),[new String("syntax-macro"),[new String("not"),[new String("odd?"),new String("~0")]]]],[new String("defmacro"),new String("odd-list"),[new String("syntax-macro"),[new String(".filter"),new String("~0"),[new String("fn"),[new String("_"),new String("i")],[new String("odd?"),new String("i")]]]]],[new String("defmacro"),new String("even-list"),[new String("syntax-macro"),[new String(".filter"),new String("~0"),[new String("fn"),[new String("_"),new String("i")],[new String("even?"),new String("i")]]]]],[new String("defmacro"),new String("arraylike->array"),[new String("syntax-macro"),[new String("Array.prototype.slice.call"),new String("~0"),new String("0")]]],[new String("defmacro"),new String("first"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("0")]]],[new String("defmacro"),new String("second"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("1")]]],[new String("defmacro"),new String("1st"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("0")]]],[new String("defmacro"),new String("2nd"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("1")]]],[new String("defmacro"),new String("3rd"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("2")]]],[new String("defmacro"),new String("4th"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("3")]]],[new String("defmacro"),new String("5th"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("4")]]],[new String("defmacro"),new String("6th"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("5")]]],[new String("defmacro"),new String("7th"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("6")]]],[new String("defmacro"),new String("8th"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("7")]]],[new String("defmacro"),new String("9th"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("8")]]],[new String("defmacro"),new String("10th"),[new String("syntax-macro"),[new String("aget"),new String("~0"),new String("9")]]],[new String("defmacro"),new String("rest"),[new String("syntax-macro"),[new String(".slice"),new String("~0"),new String("1")]]],[new String("defmacro"),new String("object"),[new String("fn"),[new String("var_args")],[new String("list"),[new String("concat"),[new String("quote"),[new String("JSCode"),"{"]],[new String(".reduce"),[new String(".map"),[new String("zip"),[new String("list"),[new String("odd-list"),[new String("arraylike->array"),new String("arguments")]],[new String("even-list"),[new String("arraylike->array"),new String("arguments")]]]],[new String("fn"),[new String("a")],[new String("list"),[new String("list"),[new String("quote"),new String("JSise")],[new String("1st"),new String("a")]],":",[new String("list"),[new String("quote"),new String("JSise")],[new String("2nd"),new String("a")]]]]],[new String("fn"),[new String("r"),new String("a"),new String("i")],[new String("if"),[new String("=="),new String("i"),new String("0")],[new String("concat"),new String("r"),new String("a")],[new String("concat"),new String("r"),[new String("list"),","],new String("a")]]],[new String("list")]],[new String("list"),"}"]]]]],[new String("defmacro"),new String("try"),[new String("syntax-macro"),[new String("JSCode"),"try {",[new String("JSise"),[new String("statement-list"),new String("~0")]],"} catch (",new String("~2"),") {",[new String("JSise"),[new String("statement-list"),new String("~3")]],"}"]]],[new String("defmacro"),new String("ignore-error"),[new String("syntax-macro"),[new String("JSCode"),"try {",[new String("JSise"),[new String("statement-list"),[new String("~0-")]]],"} catch {}"]]],[new String("defmacro"),new String("#!"),[new String("syntax-macro"),[new String("JSCode"),"#!",new String("~0"),"\n"]]],[new String("defmacro"),new String("new"),[new String("syntax-macro"),[new String("JSCode"),"(new ",new String("~0"),"(",[new String("shallow-quote-list"),[new String("~1-")]],"))"]]],[new String("defmacro"),new String("when"),[new String("syntax-macro"),[new String("JSCode"),"if (",[new String("JSise"),new String("~0")],") {\n",[new String("statement-list"),[new String("~1-")]],"}"]]],[new String("defmacro"),new String("throw"),[new String("syntax-macro"),[new String("JSCode"),"throw ",[new String("JSise"),new String("~0")]]]],[new String("defmacro"),new String("for-each-key"),[new String("syntax-macro"),[new String("JSCode"),"for (var ",new String("~0")," in ",new String("~1"),"){",[new String("JSise"),[new String("statement-list"),[new String("~2-")]]],"}"]]],[new String("defmacro"),new String("for-each"),[new String("syntax-macro"),[new String(".forEach"),new String("~2"),[new String("function"),[new String("~0")],new String("~3-")]]]],[new String("defmacro"),new String("reduce-left"),[new String("//"),"args: callback inital arr"],[new String("syntax-macro"),[new String(".reduce"),new String("~2"),new String("~0"),new String("~1")]]],[new String("defmacro"),new String("map"),[new String("syntax-macro"),[new String(".map"),new String("~1"),new String("~0")]]],[new String("defmacro"),new String("filter-only"),[new String("syntax-macro"),[new String(".filter"),new String("~1"),new String("~0")]]],[new String("defmacro"),new String("flatten"),[new String("syntax-macro"),[new String("Array.prototype.concat.apply"),new String("[]"),new String("~0")]]],[new String("defmacro"),new String("argument-array"),[new String("syntax-macro"),[new String("arraylike->array"),new String("arguments")]]],[new String("defmacro"),new String("->"),[new String("fn"),[new String("var_args")],[new String("list"),[new String("reduce-left"),[new String("fn"),[new String("form"),new String("operation")],[new String("cons"),[new String("1st"),new String("operation")],[new String("cons"),new String("form"),[new String("rest"),new String("operation")]]]],[new String("1st"),[new String("argument-array")]],[new String("rest"),[new String("argument-array")]]]]]],[new String("defmacro"),new String("defn"),[new String("syntax-macro"),[new String("var"),new String("~0"),[new String("fn-with-name"),new String("~0"),new String("~1"),new String("~2")]]]],[new String("defmacro"),new String("def-function"),[new String("syntax-macro"),[new String("var"),new String("~0"),[new String("function-with-name"),new String("~0"),new String("~1"),new String("~2-")]]]],[new String("defmacro"),new String("cond"),[new String("fn"),[new String("var_args")],[new String("list"),[new String("if"),[new String("<="),new String("arguments.length"),new String("1")],[new String("||"),[new String("aget"),new String("arguments"),new String("0")],[new String("quote"),new String("undefined")]],[new String("list"),[new String("quote"),new String("if")],[new String("aget"),new String("arguments"),new String("0")],[new String("aget"),new String("arguments"),new String("1")],[new String("if"),[new String("=="),new String("arguments.length"),new String("2")],[new String("quote"),new String("undefined")],[new String("concat"),[new String("quote"),[new String("cond")]],[new String("rest"),[new String("rest"),[new String("argument-array")]]]]]]]]]],[new String("defmacro"),new String("def-varlength-binary-operator"),[new String("syntax-macro"),[new String("defmacro"),new String("~0"),[new String("fn"),[new String("var_args")],[new String("cond"),[new String("=="),new String("arguments.length"),new String("0")],[new String("quote"),[new String("true")]],[new String("=="),new String("arguments.length"),new String("1")],[new String("argument-array")],[new String("list"),[new String("list"),[new String("quote"),new String("~1")],[new String("aget"),new String("arguments"),new String("0")],[new String("concat"),[new String("quote"),[new String("~0")]],[new String("rest"),[new String("argument-array")]]]]]]]]]],[new String("def-varlength-binary-operator"),new String("and"),new String("&&")],[new String("def-varlength-binary-operator"),new String("or"),new String("||")],[new String("def-varlength-binary-operator"),new String("+"),new String("plus-operator")],[new String("defmacro"),new String("defmethod"),[new String("syntax-macro"),[new String("set!"),new String("~0"),[new String("function"),new String("~1"),new String("~2-")]]]],[new String("defmacro"),new String("is-string?"),[new String("syntax-macro"),[new String("=="),[new String("typeof"),new String("~0")],"string"]]],[new String("defmacro"),new String("is-symbol?"),[new String("syntax-macro"),[new String("instanceof"),new String("~0"),new String("String")]]],[new String("defmacro"),new String("is-array?"),[new String("syntax-macro"),[new String("instanceof"),new String("~0"),new String("Array")]]],[new String("defmacro"),new String("reg-exp"),[new String("syntax-macro"),[new String("new"),new String("RegExp"),new String("~0-")]]],[new String("defmacro"),new String("re-match"),[new String("syntax-macro"),[new String(".match"),new String("~1"),[new String("reg-exp"),new String("~0")]]]],[new String("defmacro"),new String("debug-log"),[new String("syntax-macro"),[[new String(".debuglog"),[new String("require"),"util"],new String("~0")],new String("~1-")]]],[new String("defmacro"),new String("is-symbol-of?"),[new String("syntax-macro"),[[new String("fn"),[new String("n")],[new String("and"),[new String("is-symbol?"),new String("n")],[new String("=="),[new String(".valueOf"),new String("n")],new String("~1")]]],new String("~0")]]],[new String("defmacro"),new String("quasiquote"),[new String("fn"),[new String("template")],[new String("rest"),[[new String("fn-with-name"),new String("quasiquoteInternal"),[new String("node")],[new String("cond"),[new String("or"),[new String("is-string?"),new String("node")],[new String("is-symbol?"),new String("node")]],[new String("list"),[new String("quote"),new String("list")],[new String("list"),[new String("quote"),new String("quote")],new String("node")]],[new String("is-symbol-of?"),[new String("1st"),new String("node")],"unquote"],[new String("list"),[new String("quote"),new String("list")],[new String("2nd"),new String("node")]],[new String("is-symbol-of?"),[new String("1st"),new String("node")],"unquote-splicing"],[new String("2nd"),new String("node")],[new String("list"),[new String("quote"),new String("list")],[new String("cons"),[new String("quote"),new String("concat")],[new String("map"),[new String("fn"),[new String("i")],[new String("quasiquoteInternal"),new String("i")]],new String("node")]]]]],new String("template")]]]],[new String("defmacro"),new String("require-with-option"),[new String("function"),[new String("var_args")],[new String("var"),new String("args"),[new String("argument-array")]],[new String("defn"),new String("getJsNameFromFileNameSymbol"),[new String("fname")],[new String("new"),new String("String"),[new String("->"),new String("fname"),[new String(".valueOf")],[new String(".replace"),[new String("reg-exp"),".*/"],""],[new String(".replace"),[new String("reg-exp"),"-[a-z]","g"],[new String("fn"),[new String("c")],[new String(".toUpperCase"),[new String("aget"),new String("c"),new String("1")]]]]]]],[new String("when"),[new String("and"),[new String("=="),new String("args.length"),new String("3")],[new String("is-symbol?"),[new String("2nd"),new String("args")]],[new String("=="),[new String("symbol->string"),[new String("2nd"),new String("args")]],"as"]],[new String("return"),[new String("quasiquote"),[[new String("var"),[new String("unquote"),[new String("aget"),new String("args"),new String("2")]],[new String("require"),[new String("unquote"),[new String("symbol->string"),[new String("1st"),new String("args")]]]]]]]]],[new String("return"),[new String("quasiquote"),[[new String("var"),[new String("unquote"),[new String("getJsNameFromFileNameSymbol"),[new String("1st"),new String("args")]]],[new String("require"),[new String("unquote"),[new String("symbol->string"),[new String("1st"),new String("args")]]]]]]]]]],[new String("defmacro"),new String("requires"),[new String("fn"),[new String("var_args")],[new String("map"),[new String("fn"),[new String("m")],[new String("list"),[new String("quote"),new String("JSise")],[new String("cons"),[new String("quote"),new String("require-with-option")],new String("m")],[new String("list"),[new String("quote"),new String("JSCode")],";"]]],[new String("argument-array")]]]],[new String("defmacro"),new String("import"),[new String("function"),[new String("filename")],[new String("//"),"\n    // Search path is:\n    // 1. Relative path if it's start with './' or '..'\n    // 2. Package path.\n    // 3. node_module path.\n    "],[new String("when"),[new String("=="),new String("__compiler"),"bootstrap"],[new String("throw"),[new String("new"),new String("Error"),"Import doesn't support bootstrap compiler"]]],[new String("when"),[new String("not"),new String("require")],[new String("throw"),[new String("new"),new String("Error"),"Import is not supported"]]],[new String("when"),[new String("not"),new String("__filename")],[new String("throw"),[new String("new"),new String("Error"),"Unknown source file"]]],[new String("debug-log"),"stdlib.import","filename",new String("filename")],[new String("debug-log"),"stdlib.import","__filename",new String("__filename")],[new String("requires"),[new String("fs")],[new String("path")]],[new String("def-function"),new String("findBasePath"),[new String("basefile"),new String("filename")],[new String("defn"),new String("findProject"),[new String("dir")],[new String("if"),[new String("fs.existsSync"),[new String("path.join"),new String("dir"),"package.json"]],new String("dir"),[new String("if"),[new String("=="),new String("dir"),"/"],new String("undefined"),[new String("findProject"),[new String("path.dirname"),new String("dir")]]]]],[new String("var"),new String("projectdir"),[new String("findProject"),[new String("path.dirname"),new String("basefile")]]],[new String("debug-log"),"stdlib.import","projectdir",new String("projectdir")],[new String("var"),new String("projectpath"),[new String("path.join"),new String("projectdir"),new String("filename")]],[new String("when"),[new String("fs.existsSync"),new String("projectpath")],[new String("return"),new String("projectpath")]],[new String("var"),new String("nodeModulesPath"),[new String("path.join"),new String("projectdir"),"node_modules",new String("filename")]],[new String("when"),[new String("fs.existsSync"),new String("nodeModulesPath")],[new String("return"),new String("nodeModulesPath")]],[new String("return"),new String("undefined")]],[new String("var"),new String("fname"),[new String("if"),[new String("or"),[new String("=="),[new String(".substr"),new String("filename"),new String("0"),new String("2")],"./"],[new String("=="),[new String(".substr"),new String("filename"),new String("0"),new String("3")],"../"]],[new String("path.resolve"),[new String("path.dirname"),new String("__filename")],new String("filename")],[new String("findBasePath"),new String("__filename"),new String("filename")]]],[new String("debug-log"),"stdlib.import","fname",new String("fname")],[new String("when"),[new String("not"),new String("fname")],[new String("throw"),[new String("new"),new String("Error"),[new String("+"),"imported file not found : ",new String("filename")]]]],[new String("return"),[new String("__macro"),[new String("__parser"),[new String("+"),[new String("fs.readFileSync"),new String("fname")],""]],[new String("object"),new String("filename"),new String("fname")],new String("__macros")]]]],[new String("defmacro"),new String("make-map"),[new String("syntax-macro"),[new String("reduce-left"),[new String("function"),[new String("m"),new String("kv")],[new String("aset!"),new String("m"),[new String("1st"),new String("kv")],[new String("2nd"),new String("kv")]],[new String("return"),new String("m")]],[new String("object")],new String("~0")]]],[new String("defmacro"),new String("throw-expression"),[new String("syntax-macro"),[[new String("function"),[],[new String("throw"),new String("~0")]]]]],[new String("defmacro"),new String("-->"),[new String("fn"),[new String("var_args")],[new String("list"),[new String("concat"),[new String("quote"),[new String("->"),[new String("Promise.resolve")]]],[new String("map"),[new String("fn"),[new String("exp")],[new String("quasiquote"),[new String(".then"),[new String("unquote"),new String("exp")]]]],[new String("argument-array")]]]]]],[new String("defmacro"),new String("async-function"),[new String("syntax-macro"),[new String("fn"),new String("~0"),[new String("-->"),new String("~1-")]]]],[new String("defmacro"),new String("while"),[new String("syntax-macro"),[new String("JSCode"),"while (",[new String("JSise"),new String("~0")],") {",[new String("JSise"),[new String("statement-list"),[new String("~1-")]]],"}"]]],[new String("defmacro"),new String("define-macro"),[new String("syntax-macro"),[new String("defmacro"),new String("~0"),new String("~1")]]],[new String("define-macro"),new String("//"),[new String("JSCode"),"(function() { return []; })"]],[new String("//"),"New macros\n- SHOULD NOT depends macro defined above\n- SHOULD follow naming convention.\n- SHOULD have comments.\n- SHOULD NOT use dot syntax.\n"],[new String("define-macro"),new String("syntax-template"),[new String("syntax-macro"),[new String("syntax-macro"),new String("~0-")]]],[new String("define-macro"),new String("define-macro-with-comment"),[new String("syntax-template"),[new String("define-macro"),new String("~0"),new String("~2")]]],[new String("define-macro"),new String("syntax-template-with-comment"),[new String("syntax-template"),[new String("syntax-template"),new String("~1-")]]],[new String("define-macro-with-comment"),new String("define-function"),"define javascript function.\n  ~0  symbol name.\n  ~1  list of parameters.\n  ~2- statements.\n  This returns statement.",[new String("syntax-template"),[new String("var"),new String("~0"),[new String("function-with-name"),new String("~0"),new String("~1"),new String("~2-")]]]],[new String("define-macro-with-comment"),new String("define-function-with-comment"),"define javascript function.\n  ~0  symbol name.\n  ~1  list of parameters.\n  ~2  Comment.\n  ~3- statements.\n  This returns statement.",[new String("syntax-template"),[new String("var"),new String("~0"),[new String("function-with-name"),new String("~0"),new String("~1"),new String("~3-")]]]],[new String("define-macro-with-comment"),new String("array-get"),"Get an item from array or object.\n  ~0 array.\n  ~1 index.",[new String("syntax-template"),[new String("JSCode"),"(",[new String("JSise"),new String("~0")],"[",[new String("JSise"),new String("~1")],"])"]]],[new String("define-macro-with-comment"),new String("array-set!"),"Set an value to array or object.\n  ~0 array.\n  ~1 index.\n  ~2 value.",[new String("syntax-template"),[new String("JSCode"),"(",[new String("JSise"),new String("~0")],"[",[new String("JSise"),new String("~1")],"] = ",[new String("JSise"),new String("~2")],")"]]],[new String("define-macro-with-comment"),new String("."),"This macro has few form.\n  (. obj key arg) Call method named key on obj with arg as argument.\n  (. obj -key) Get property named key on obj.\n  (. obj -key val) Set property named key on obj to val.",[new String("function-with-name"),new String("dot"),[new String("obj"),new String("key"),new String("val")],[new String("var"),new String("name"),[new String(".substr"),[new String(".valueOf"),new String("key")],new String("1")]],[new String("return"),[new String("if"),[new String(".startsWith"),new String("key"),"-"],[new String("if"),[new String("==="),new String("val"),new String("undefined")],[new String("quasiquote"),[[new String("JSCode"),"(",[new String("JSise"),[new String("unquote"),new String("obj")]],").",[new String("unquote"),new String("name")]]]],[new String("quasiquote"),[[new String("="),[new String("JSCode"),"(",[new String("JSise"),[new String("unquote"),new String("obj")]],").",[new String("unquote"),new String("name")]],[new String("unquote"),new String("val")]]]]],[new String("list"),[new String("concat"),[new String("list"),[new String("new"),new String("String"),[new String("+"),".",new String("key")]],new String("obj")],[new String(".slice"),[new String("argument-array")],new String("2")]]]]]]],[new String("define-macro-with-comment"),new String("define-array-accessor"),"~0 name.\n   ~1 index.",[new String("syntax-template"),[new String("define-macro"),new String("~0"),[new String("syntax-template"),[new String("array-get"),new String("~~0"),new String("~1")]]]]],[new String("define-array-accessor"),new String("1st"),new String("0")],[new String("define-array-accessor"),new String("2nd"),new String("1")],[new String("define-array-accessor"),new String("3rd"),new String("2")],[new String("define-array-accessor"),new String("4th"),new String("3")],[new String("define-array-accessor"),new String("5th"),new String("4")],[new String("define-array-accessor"),new String("6th"),new String("5")],[new String("define-array-accessor"),new String("7th"),new String("6")],[new String("define-array-accessor"),new String("8th"),new String("7")],[new String("define-array-accessor"),new String("9th"),new String("8")],[new String("define-macro-with-comment"),new String("repeat-times"),"~0 index\n   ~1 max (exclusive)",[new String("syntax-template"),[new String("for"),[new String("var"),new String("~0"),new String("0")],[new String("<"),new String("~0"),new String("~1")],[new String("set!"),new String("~0"),[new String("+"),new String("~0"),new String("1")]],new String("~2-")]]],[new String("define-macro-with-comment"),new String("for"),"~0  initializer\n   ~1  condition\n   ~2  increment\n   ~3- contents",[new String("syntax-template"),[new String("JSCode"),"for(",new String("~0"),";",new String("~1"),";",new String("~2"),"){",[new String("JSise"),[new String("statement-list"),[new String("~3-")]]],"}"]]],[new String("//"),"Functions for web related things."],[new String("define-macro-with-comment"),new String("get-element-by-class"),"Get an element by class name in document.\n  ~0 class name.",[new String("syntax-template"),[new String("1st"),[new String("document.getElementsByClassName"),new String("~0")]]]],[new String("define-function-with-comment"),new String("wabisabi"),[new String("arg")],"Wabisabi to html converter.\n  When arg is string, Return text node that contains it.\n  When arg is array, We assume it's wabisabi element. Convert it to dom element\n  and return it.\n  Otherwise return undefined.",[new String("when"),[new String(">"),[new String("."),new String("arg"),new String("-nodeType")],new String("0")],[new String("return"),new String("arg")]],[new String("when"),[new String("=="),[new String("typeof"),new String("arg")],"string"],[new String("return"),[new String("."),new String("document"),new String("createTextNode"),new String("arg")]]],[new String("when"),[new String("=="),[new String("."),new String("arg"),new String("-length")],new String("undefined")],[new String("return"),new String("undefined")]],[new String("var"),new String("tag"),"span"],[new String("var"),new String("classes"),[new String("list")]],[new String("var"),new String("id"),new String("undefined")],[new String("var"),new String("m"),new String("undefined")],[new String("var"),new String("r"),[new String("1st"),new String("arg")]],[new String("while"),[new String("="),new String("m"),[new String("re-match"),"^([.#])?([^.#]+)(.*)",new String("r")]],[new String("cond"),[new String("=="),[new String("2nd"),new String("m")],"."],[new String("."),new String("classes"),new String("push"),[new String("3rd"),new String("m")]],[new String("=="),[new String("2nd"),new String("m")],"#"],[new String("set!"),new String("id"),[new String("3rd"),new String("m")]],[new String("set!"),new String("tag"),[new String("3rd"),new String("m")]]],[new String("set!"),new String("r"),[new String("4th"),new String("m")]]],[new String("var"),new String("n"),[new String("."),new String("document"),new String("createElement"),new String("tag")]],[new String("when"),new String("id"),[new String("."),new String("n"),new String("-id"),new String("id")]],[new String("when"),[new String("1st"),new String("classes")],[new String("."),new String("n"),new String("-className"),[new String("."),new String("classes"),new String("join")," "]]],[new String("for-each-key"),new String("k"),[new String("2nd"),new String("arg")],[new String("cond"),[new String("=="),new String("k"),"style"],[new String("."),[new String("."),new String("n"),new String("-style")],new String("-cssText"),[new String("array-get"),[new String("2nd"),new String("arg")],new String("k")]],[new String("=="),new String("k"),"class"],[new String("."),new String("n"),new String("-className"),[new String("array-get"),[new String("2nd"),new String("arg")],new String("k")]],[new String("array-set!"),new String("n"),new String("k"),[new String("array-get"),[new String("2nd"),new String("arg")],new String("k")]]]],[new String("var"),new String("arr"),[new String("rest"),[new String("rest"),new String("arg")]]],[new String("for-each-key"),new String("i"),new String("arr"),[new String("."),new String("n"),new String("appendChild"),[new String("wabisabi"),[new String("array-get"),new String("arr"),new String("i")]]]],[new String("return"),new String("n")]],[new String("define-function-with-comment"),new String("getRandomInt"),[new String("min"),new String("max")],"Return random integer.",[new String("return"),[new String("+"),[new String("."),new String("Math"),new String("floor"),[new String("*"),[new String("."),new String("Math"),new String("random")],[new String("+"),[new String("-"),new String("max"),new String("min")],new String("1")]]],new String("min")]]]],JSCode=new String("JSCode"),JSise=new String("JSise"),equalString=function(n,e){
return n instanceof String&&e instanceof String&&n.valueOf()==e.valueOf()},readOnlyClone=function(n){var e=function(){};return e.prototype=n,new e},L=function(n,e){return"undefined"!=typeof require?require("util").debuglog(n)(e):void 0},loadStdlib=function(){return require?require("fs").readFileSync(require("path").join(__dirname,"..","src","stdlib.jsise")):function(){throw new Error("Unsupported environment")}()},stdlib=stdlib||null,getStdlib=function(){return stdlib?stdlib:stdlib=loadStdlib()},jsise=function r(n,e){L("jsise.compiler","--jsise--"),L("jsise.compiler",n),L("jsise.compiler",t);var t=e||{},i=t.withStdlib?getStdlib()+n:n;return r.codegen(r.convert(r.macro(r.parser(i),t)))};jsise.parser=function(n){var e=0,r=null,t=[[]],i="",g={};for(g.paren=function(){var i=n[e];"("==i?function(){var n=[];t[0].push(n),t.unshift(n)}():" "==i||"\n"==i||"	"==i?void 0:")"==i?function(){if(1==t.length)throw new Error("Too many closed paren");t.shift()}():'"'==i?r=g.stringLiteral:function(){(r=g.id)()}()},g.id=function(){var S=n[e];"("==S||")"==S||'"'==S||" "==S||"\n"==S||"	"==S?(t[0].push(new String(i)),i="",(r=g.paren)()):i+=S},g.stringLiteral=function(){var S=n[e];"\\"==S?r=g.esc:'"'==S?function(){t[0].push(i),i="",r=g.paren}():i+=S},g.esc=function(){var t=n[e];i+="n"==t?"\n":"t"==t?"	":t,r=g.stringLiteral},void(r=g.paren);e<n.length;++e)r();if(1!=t.length)throw new Error("unclosed paren");if(r==g.stringLiteral)throw new Error("unclosed string");return t[0]},jsise.macro=function(ast,opt,opt_macros){if(!(ast instanceof Array))return ast;var macros=opt_macros||{};return macros.defmacro=function(name,opt_bodys){var __compiler="jsise",__parser=jsise.parser,__macro=jsise.macro,__filename=opt.filename,__macros=macros;return macros[name.valueOf()]=eval(jsise.codegen(jsise.convert(jsise.macro(Array.prototype.slice.call(arguments,0).slice(1),opt,macros)))),[]},ast.reduce(function n(e,r){return r instanceof Array&&r[0]instanceof String&&macros[r[0].valueOf()]?macros[r[0].valueOf()].apply(void 0,r.slice(1)).reduce(n,e):Array.prototype.concat.apply([],[e,[jsise.macro(r,opt,readOnlyClone(macros))]])},[])},jsise.convert=function(n){var e=function r(n){try{if(L("jsise.convert",n),"string"==typeof n){for(var e=[JSCode,'"'],t=0;t<n.length;++t){var i=n.charAt(t);'"'==i||"\\"==i?e.push("\\"+i):"\n"==i?e.push("\\n"):"	"==i?e.push("\\t"):e.push(i)}return e.push('"'),e}if(n instanceof String)return[JSCode,n.valueOf()];if(!(n instanceof Array))throw L("jsise.convert",n),new Error("Invalid ast:"+n);if(equalString(JSise,n[0]))return Array.prototype.concat.apply([],[[JSCode],n.slice(1).map(r)]);if(equalString(JSCode,n[0]))return n.map(function(n,e){return 0==e||"string"==typeof n?n:r(n)});var g=null,S=null;return n[0]instanceof String&&"."==n[0].valueOf()[0]?(g=[JSCode,r(n[1]),n[0].valueOf()],S=n.slice(1).slice(1)):(g=[JSCode,r(n[0])],S=n.slice(1)),Array.prototype.concat.apply([],[g,["("],S.map(r).reduce(function(n,e,r){return 0!=r?Array.prototype.concat.apply([],[n,[",",e]]):Array.prototype.concat.apply([],[n,[e]])},[]),[")"]])}catch(w){throw w.message=w.message+"\n at "+JSON.stringify(n),w}};return n.map(function(n){return[JSCode,e(n),";"]})},jsise.codegen=function(n){return n.map(function e(n){if(!(n instanceof Array&&equalString(JSCode,n[0])))throw new Error("Invalid code: "+JSON.stringify(n));return n.slice(1).map(function(n){return"string"==typeof n?n:e(n)}).join("")}).join("\n\n")},"undefined"!=typeof module&&module.exports&&(module.exports=jsise);var wabisabi=function t(n){if(n.nodeType>0)return n;if("string"==typeof n)return document.createTextNode(n);if(void 0!=n.length){for(var e="span",r=[],i=void 0,g=void 0,S=n[0];g=S.match(new RegExp("^([.#])?([^.#]+)(.*)"));)"."==g[1]?r.push(g[2]):"#"==g[1]?i=g[2]:e=g[2],S=g[3];var w=document.createElement(e);i&&(w.id=i),r[0]&&(w.className=r.join(" "));for(var a in n[1])"style"==a?w.style.cssText=n[1][a]:"class"==a?w.className=n[1][a]:w[a]=n[1][a];var o=n.slice(1).slice(1);for(var s in o)w.appendChild(t(o[s]));return w}},getRandomInt=function(n,e){return Math.floor(Math.random()*(e-n+1))+n},ss=document.getElementsByTagName("script");for(var e in ss)"text/jsise"==ss[e].type&&eval(jsise.codegen(jsise.convert(jsise.macro(Array.prototype.concat.apply([],[stdlib,jsise.parser(ss[e].textContent)]),{}))))}();
